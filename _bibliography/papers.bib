---
---

@string{aps = {American Physical Society,}}

@inproceedings{deshpande2020composition,
  abbr={ECSA CASA 2020},
  title={Composition algorithm adaptation in service-oriented systems},
  author={Deshpande, Niranjana and Sharma, Naveen},
  booktitle={European Conference on Software Architecture},
  pages={170--179},
  year={2020},
  organization={Springer},
  slides = {https://casaecsa.github.io/casa2020/Niranjana-PrintFriendlyCompositionAlgorithmAdaptationinServiceOrientedSystems-3.pdf},
  doi = {https://doi.org/10.1007/978-3-030-59155-7_13},
  bibtex_show={true}
}

@inproceedings{10.1145/3449726.3462736,
abbr={GECCO LBA 2021},
author = {Deshpande, Niranjana and Sharma, Naveen},
title = {Algorithm selection using transfer learning},
year = {2021},
isbn = {9781450383516},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3449726.3462736},
doi = {10.1145/3449726.3462736},
booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference Companion},
pages = {51–52},
numpages = {2},
keywords = {algorithm selection, service composition, transfer learning, travelling salesman problem},
location = {Lille, France},
series = {GECCO '21},
bibtex_show={true}
}


@inproceedings{deshpande2021r,
  abbr={ICWS 2021},
  title={R-CASS: Using algorithm selection for self-adaptive service-oriented systems},
  author={Deshpande, Niranjana and Sharma, Naveen and Yu, Qi and Krutz, Daniel E},
  booktitle={2021 IEEE International Conference on Web Services (ICWS)},
  pages={61--72},
  year={2021},
  organization={IEEE},
  bibtex_show={true},
  doi={10.1109/ICWS53863.2021.00021},
  
}

@inproceedings{deshpande2022search,
  abbr={EvoApps 2022},
  title={Search-based third-party library migration at the method-level},
  author={Deshpande, Niranjana and Mkaouer, Mohamed Wiem and Ouni, Ali and Sharma, Naveen},
  booktitle={International Conference on the Applications of Evolutionary Computation (Part of EvoStar)},
  pages={173--190},
  year={2022},
  bibtex_show={true},
  doi={https://doi.org/10.1007/978-3-031-02462-7_12}
}

@inproceedings{10.1145/3512290.3528745,
abbr={GECCO 2022},
author = {Haq, Aizaz Ul and Deshpande, Niranjana and ElSaid, AbdElRahman and Desell, Travis and Krutz, Daniel E.},
title = {Addressing tactic volatility in self-adaptive systems using evolved recurrent neural networks and uncertainty reduction tactics},
year = {2022},
isbn = {9781450392372},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3512290.3528745},
doi = {10.1145/3512290.3528745},
abstract = {Self-adaptive systems frequently use tactics to perform adaptations. Tactic examples include the implementation of additional security measures when an intrusion is detected, or activating a cooling mechanism when temperature thresholds are surpassed. Tactic volatility occurs in real-world systems and is defined as variable behavior in the attributes of a tactic, such as its latency or cost. A system's inability to effectively account for tactic volatility adversely impacts its efficiency and resiliency against the dynamics of real-world environments. To enable systems' efficiency against tactic volatility, we propose a Tactic Volatility Aware (TVA-E) process utilizing evolved Recurrent Neural Networks (eRNN) to provide accurate tactic predictions. TVA-E is also the first known process to take advantage of uncertainty reduction tactics to provide additional information to the decision-making process and reduce uncertainty. TVA-E easily integrates into popular adaptation processes enabling it to immediately benefit a large number of existing self-adaptive systems. Simulations using 52,106 tactic records demonstrate that: I) eRNN is an effective prediction mechanism, II) TVA-E represents an improvement over existing state-of-the-art processes in accounting for tactic volatility, and III) Uncertainty reduction tactics are beneficial in accounting for tactic volatility. The developed dataset and tool can be found at https://tacticvolatility.github.io/},
booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference},
pages = {1299–1307},
numpages = {9},
keywords = {adaptive systems, deep learning, recurrent neural networks, uncertainty},
location = {Boston, Massachusetts},
series = {GECCO '22},
bibtex_show={true}

}

@INPROCEEDINGS{9885741,
  abbr={ICWS 2022},
  author={Deshpande, Niranjana and Sharma, Naveen and Yu, Qi and Krutz, Daniel E.},
  booktitle={2022 IEEE International Conference on Web Services (ICWS)}, 
  title={Online Learning Using Incomplete Execution Data for Self-Adaptive Service-Oriented Systems}, 
  year={2022},
  volume={},
  number={},
  pages={296-301},
  doi={10.1109/ICWS55610.2022.00051},
  bibtex_show={true}
}



@article{DESHPANDE2024101444,
abbr={Swarm and Evolutionary Computation 2023},
bibtex_show={true},
title = {Third-party software library migration at the method-level using multi-objective evolutionary search},
journal = {Swarm and Evolutionary Computation},
volume = {84},
pages = {101444},
year = {2024},
issn = {2210-6502},
doi = {https://doi.org/10.1016/j.swevo.2023.101444},
url = {https://www.sciencedirect.com/science/article/pii/S221065022300216X},
author = {Niranjana Deshpande and Mohamed Wiem Mkaouer and Ali Ouni and Naveen Sharma},
keywords = {Search-based software engineering, Library migration, API migration, NSGAII, Multi-objective search},
abstract = {Software developers commonly use third-party software libraries to reduce implementation efforts and mitigate errors in their source code while building high-quality and reliable software. To support software evolution, newer libraries are released periodically with added features, improvements in performance as well as critical updates such as bug fixes. Hence, older, existing (source) libraries need to be replaced with their newer, updated (target) counterparts, in a process known as library migration. Typically, library migration is a time-consuming, manual, and error-prone process that requires developers to analyze the source and target library code and its documentation. Specifically, developers examine Application Programming Interface (API) implementations and documentation to replace each source API with a target API without modifying the underlying software functionality. While recent works have used various techniques to recommend suitable target library replacements, these approaches do not generalize well, e.g., when a source library method needs to be replaced by one or more target library APIs or methods. To address this limitation, we propose the use of multi-objective evolutionary algorithms to identify suitable method replacements during library migration. In particular, we formulate library migration at the method-level as a multi-objective combinatorial optimization problem and examine the performance of 7 multi-objective evolutionary algorithms: UNSGAIII, RNSGAII, AGEMOEA, SMSEMOA, NSGAII, IBEA and MOEAD. We use method signature and documentation similarity, and co-occurrence probability to accurately recommend one or more target library methods. We evaluate our approach by conducting an empirical study on 9 popular Java library migrations mined from 57,447 open-source projects on GitHub. Our results demonstrate that UNSGAIII, RNSGAII, AGEMOEA, SMSEMOA, NSGAII, IBEA and MOEAD achieve 90%, 89%, 94%, 90%, 91%, 94%, and 71% precision on average, and 83%, 23%, 58%, 63%, 58%, 60% and 17% average recall respectively. In the interest of reproducibility, we make all code and results publicly available at: http://bit.ly/MOO-api-migration.}
}
